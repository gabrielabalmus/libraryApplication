generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type LibrarySchedule {
  mondayFriday TimeSchedule
  saturday     TimeSchedule
}

type TimeSchedule {
  from String
  to   String
}

enum Status {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

type Penalty {
  days   Int
  amount Int
  paid   Boolean
}

model Users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Libraries {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  address       String
  phone         String
  bookLibraries BookLibraries[]
  cityId        String          @db.ObjectId
  city          Cities          @relation(fields: [cityId], references: [id])
  deleted       Boolean         @default(false)
  schedule      LibrarySchedule
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Books {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String
  author         String
  bookLibraries  BookLibraries[]
  categoryId     String          @db.ObjectId
  category       Categories      @relation(fields: [categoryId], references: [id])
  publishHouseId String          @db.ObjectId
  publishHouse   PublishHouses   @relation(fields: [publishHouseId], references: [id])
  releaseYear    Int
  pagesNumber    Int
  language       String
  deleted        Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Categories {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  value String  @unique
  books Books[]
}

model PublishHouses {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  value String  @unique
  books Books[]
}

model BookLibraries {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  bookId     String       @db.ObjectId
  book       Books        @relation(fields: [bookId], references: [id])
  libraryId  String       @db.ObjectId
  library    Libraries    @relation(fields: [libraryId], references: [id])
  orderBooks OrderBooks[]
  SKU        String
  place      String
  deleted    Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Cities {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique
  value     String      @unique
  libraries Libraries[]
  customers Customers[]
}

model Customers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String
  phone     String
  password  String
  email     String
  cityId    String   @db.ObjectId
  city      Cities   @relation(fields: [cityId], references: [id])
  orders    Orders[]
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderBooks {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  bookLibraryId String        @db.ObjectId
  bookLibrary   BookLibraries @relation(fields: [bookLibraryId], references: [id])
  orderId       String        @db.ObjectId
  order         Orders        @relation(fields: [orderId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Orders {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  number      String       @unique
  status      Status       @default(PENDING)
  customerId  String       @db.ObjectId
  customer    Customers    @relation(fields: [customerId], references: [id])
  books       OrderBooks[]
  penalty     Penalty?
  confirmedAt DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
