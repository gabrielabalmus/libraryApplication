generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type LibrarySchedule {
  mondayFriday TimeSchedule
  saturday     TimeSchedule
}

type TimeSchedule {
  from String
  to   String
}

enum Status {
  RESERVED
  BORROWED
  RETURNED
  CANCELLED
}

type Penalty {
  days   Int
  amount Int
  paid   Boolean
}

model Users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Libraries {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  address       String
  phone         String
  bookLibraries BookLibraries[]
  cityId        String          @db.ObjectId
  city          Cities          @relation(fields: [cityId], references: [id])
  deleted       Boolean         @default(false)
  schedule      LibrarySchedule
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Books {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String
  author         String
  description    String
  bookLibraries  BookLibraries[]
  categoryId     String          @db.ObjectId
  category       Categories      @relation(fields: [categoryId], references: [id])
  publishHouseId String          @db.ObjectId
  publishHouse   PublishHouses   @relation(fields: [publishHouseId], references: [id])
  languageId     String          @db.ObjectId
  language       Languages       @relation(fields: [languageId], references: [id])
  releaseYear    Int
  pagesNumber    Int
  deleted        Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Categories {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  value String  @unique
  books Books[]
}

model PublishHouses {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  value String  @unique
  books Books[]
}

model BookLibraries {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  bookId    String      @db.ObjectId
  book      Books       @relation(fields: [bookId], references: [id])
  libraryId String      @db.ObjectId
  library   Libraries   @relation(fields: [libraryId], references: [id])
  loanBooks LoanBooks[]
  SKU       String
  place     String
  deleted   Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Cities {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique
  value     String      @unique
  libraries Libraries[]
  readers   Readers[]
}

model Readers {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String
  phone       String
  password    String
  email       String
  birthdate   String
  cityId      String   @db.ObjectId
  city        Cities   @relation(fields: [cityId], references: [id])
  loans       Loans[]
  deleted     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  languagesId String?  @db.ObjectId
}

model LoanBooks {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  bookLibraryId String        @db.ObjectId
  bookLibrary   BookLibraries @relation(fields: [bookLibraryId], references: [id])
  loanId        String        @db.ObjectId
  loan          Loans         @relation(fields: [loanId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Loans {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  number     String      @unique
  status     Status      @default(RESERVED)
  readerId   String      @db.ObjectId
  reader     Readers     @relation(fields: [readerId], references: [id])
  books      LoanBooks[]
  penalty    Penalty?
  borrowedAt DateTime?
  returnedAt DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Languages {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  value String  @unique
  books Books[]
}
